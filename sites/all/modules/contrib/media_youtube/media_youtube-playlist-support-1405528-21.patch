diff --git a/includes/MediaInternetYouTubeHandler.inc b/includes/MediaInternetYouTubeHandler.inc
index 986f785..95e22f5 100644
--- a/includes/MediaInternetYouTubeHandler.inc
+++ b/includes/MediaInternetYouTubeHandler.inc
@@ -12,6 +12,19 @@
  */
 class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
   public function parse($embedCode) {
+    $list_patterns = array(
+      '@youtube\.com/playlist[#\?].*?list=([^"\& ]+)@i',
+      '@youtube\.com/view_play_list[#\?].*?p=([^"\& ]+)@i',
+    );
+
+    foreach ($list_patterns as $pattern) {
+      preg_match($pattern, $embedCode, $matches);
+
+      if (isset($matches[1]) && self::validId($matches[1], 'l')) {
+        return file_stream_wrapper_uri_normalize('youtube://l/' . $matches[1]);
+      }
+    }
+
     // http://youtube.com/watch/*
     // http://youtube.com/embed/*
     // http://youtube.com/v/*
@@ -19,6 +32,11 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
     // http://youtu.be/*
     // http://gdata.youtube.com/feeds/api/videos/*
     $patterns = array(
+       // Videos in a playlist, with play-related enabled
+      '@youtube\.com/watch[#\?].*?v=([^"\& ]+).*&list=([^"\& ]+)@i',
+      '@youtu\.be/([^"\&\? ]+)\?list=([^"\& ]+)@i',
+      '@youtube\.com/embed/([^"\&\? ]+)\?list=([^"\& ]+)@i',
+      // All other videos
       '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
       '@youtube\.com/embed/([^"\&\? ]+)@i',
       '@youtube\.com/v/([^"\&\? ]+)@i',
@@ -28,11 +46,16 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
     );
 
     foreach ($patterns as $pattern) {
-      preg_match($pattern, $embedCode, $matches);
+      preg_match_all($pattern, $embedCode, $matches);
       // @TODO: Parse is called often. Refactor so that valid ID is checked
       // when a video is added, but not every time the embedCode is parsed.
-      if (isset($matches[1]) && self::validId($matches[1])) {
-        return file_stream_wrapper_uri_normalize('youtube://v/' . $matches[1]);
+      if (isset($matches[1][0]) && self::validId($matches[1][0])) {
+        $uri = 'youtube://v/' . $matches[1][0];
+
+        if (isset($matches[2][0]) && self::validId($matches[2][0], 'l')) {
+          $uri .= '/l/' . $matches[2][0];
+        }
+        return file_stream_wrapper_uri_normalize($uri);
       }
     }
   }
@@ -87,8 +110,8 @@ class MediaInternetYouTubeHandler extends MediaInternetBaseHandler {
    *   TRUE if the video ID is valid, or throws a
    *   MediaInternetValidationException otherwise.
    */
-  static public function validId($id) {
-    $uri = file_stream_wrapper_uri_normalize('youtube://v/' . check_plain($id));
+  static public function validId($id, $type = 'v') {
+    $uri = file_stream_wrapper_uri_normalize('youtube://' . $type . '/' . check_plain($id));
     $external_url = file_create_url($uri);
     $oembed_url = url('http://www.youtube.com/oembed', array('query' => array('url' => $external_url, 'format' => 'json')));
     $response = drupal_http_request($oembed_url, array('method' => 'HEAD'));
diff --git a/includes/MediaYouTubeStreamWrapper.inc b/includes/MediaYouTubeStreamWrapper.inc
index df3b44f..68e3a15 100644
--- a/includes/MediaYouTubeStreamWrapper.inc
+++ b/includes/MediaYouTubeStreamWrapper.inc
@@ -12,14 +12,37 @@
 class MediaYouTubeStreamWrapper extends MediaReadOnlyStreamWrapper {
   protected $base_url = 'http://www.youtube.com/watch';
 
+  /**
+   * Updates $base_url depending on whether the embed is a video or playlist.
+   */
+  function setBaseUrl($parameters) {
+    if (isset($parameters['l'])) {
+      if (!isset($parameters['v'])) {
+        $this->base_url = 'http://youtube.com/playlist';
+      }
+      $parameters['list'] = $parameters['l'];
+      unset($parameters['l']);
+    }
+    return $parameters;
+  }
+  /**
+   * Returns a url in the format "http://www.youtube.com/watch?v=qsPQN4MiTeE".
+   *
+   * Overrides interpolateUrl() defined in MediaReadOnlyStreamWrapper.
+   */
+  function interpolateUrl() {
+    if ($parameters = $this->get_parameters()) {
+      $parameters = $this->setBaseUrl($parameters);
+      return $this->base_url . '?' . http_build_query($parameters);
+    }
+  }
+
   static function getMimeType($uri, $mapping = NULL) {
     return 'video/youtube';
   }
 
   function getOriginalThumbnailPath() {
-    $parts = $this->get_parameters();
-    $uri = file_stream_wrapper_uri_normalize('youtube://v/' . check_plain($parts['v']));
-    $external_url = file_create_url($uri);
+    $external_url = $this->getExternalUrl();
     $oembed_url = url('http://www.youtube.com/oembed', array('query' => array('url' => $external_url, 'format' => 'json')));
     $response = drupal_http_request($oembed_url);
 
@@ -27,6 +50,15 @@ class MediaYouTubeStreamWrapper extends MediaReadOnlyStreamWrapper {
       $data = drupal_json_decode($response->data);
       return $data['thumbnail_url'];
     }
+    elseif ($response->code == 401) {
+      throw new MediaInternetValidationException("Embedding has been disabled for this video.");
+    }
+    elseif ($response->code == 404) {
+      return "http://s.ytimg.com/yts/img/image-hh-404-vflvCykRp.png";
+    }
+    elseif ($response->code != 200) {
+      throw new MediaInternetValidationException("The YouTube video ID is invalid or the video was deleted.");
+    }
     else {
       throw new Exception(t('Error Processing Request. (Error: %code, %error)', array('%code' => $response->code, '%error' => $response->error)));
     }
@@ -34,7 +66,8 @@ class MediaYouTubeStreamWrapper extends MediaReadOnlyStreamWrapper {
 
   function getLocalThumbnailPath() {
     $parts = $this->get_parameters();
-    $local_path = file_default_scheme() . '://media-youtube/' . check_plain($parts['v']) . '.jpg';
+    $id = array_pop($parts);
+    $local_path = file_default_scheme() . '://media-youtube/' . check_plain($id) . '.jpg';
 
     if (!file_exists($local_path)) {
       // getOriginalThumbnailPath throws an exception if there are any errors
diff --git a/themes/media_youtube.theme.inc b/themes/media_youtube.theme.inc
index 25e339e..ef60a4e 100644
--- a/themes/media_youtube.theme.inc
+++ b/themes/media_youtube.theme.inc
@@ -13,7 +13,17 @@ function media_youtube_preprocess_media_youtube_video(&$variables) {
   // Build the URI.
   $wrapper = file_stream_wrapper_get_instance_by_uri($variables['uri']);
   $parts = $wrapper->get_parameters();
-  $variables['video_id'] = check_plain($parts['v']);
+
+  if (isset($parts['v'])) {
+    $variables['embed_type'] = 'video';
+    $variables['video_id'] = check_plain($parts['v']);
+    $embed_path = '/embed/' . $variables['video_id'];
+  }
+  elseif (isset($parts['l'])) {
+    $variables['embed_type'] = 'playlist';
+    $variables['video_id'] = check_plain($parts['l']);
+    $embed_path = '/embed/videoseries';
+  }
 
   // Make the file object available.
   $file_object = file_uri_to_object($variables['uri']);
@@ -123,6 +133,10 @@ function media_youtube_preprocess_media_youtube_video(&$variables) {
   // to use for the alternative content.
   $variables['alternative_content'] = t('Video of @title', array('@title' => $variables['title']));
 
+  if (isset($parts['l'])) {
+    $query['list'] = $parts['l'];
+  }
+
   // Build the iframe URL with options query string.
-  $variables['url'] = url($protocol . '//www.' . $url_base . '/embed/' . $variables['video_id'], array('query' => $query, 'external' => TRUE));
+  $variables['url'] = url($protocol . '//www.' . $url_base . $embed_path, array('query' => $query, 'external' => TRUE));
 }
